const aside = document.querySelector('#aside');
const asideBtn = document.querySelector('#aside-btn');
function handleAside(event) {
    aside.classList.add('open');
}
asideBtn.addEventListener('click', handleAside);

const profile = document.querySelector('.profile');
const dropdown = document.querySelector('.profile-dropdown');

function handleProfileClick(event) {
    dropdown.classList.add('open');
}

profile.addEventListener('click', handleProfileClick);
window.addEventListener('click', function(event) {
    if (!event.target.closest('.profile-div')) {
        dropdown.classList.remove('open');
    }
    if (!event.target.closest('#aside') && !event.target.closest('#aside-btn')) {
        aside.classList.remove('open');
    }
});

am4core.ready(function () {

    // Themes begin
    am4core.useTheme(am4themes_amcharts);
    // Themes end

    // Create chart instance
    var chart = am4core.create("chartdiv", am4charts.XYChart);

    // Add data
    chart.data = [{
        "country": "USA",
        "visits": 2025
    }, {
        "country": "China",
        "visits": 1882
    }, {
        "country": "Japan",
        "visits": 1809
    }, {
        "country": "Germany",
        "visits": 1322
    }, {
        "country": "UK",
        "visits": 1122
    }, {
        "country": "France",
        "visits": 1114
    }, {
        "country": "India",
        "visits": 984
    }, {
        "country": "Spain",
        "visits": 711
    }, {
        "country": "Netherlands",
        "visits": 665
    }, {
        "country": "Russia",
        "visits": 580
    }, {
        "country": "South Korea",
        "visits": 443
    }, {
        "country": "Canada",
        "visits": 441
    }, {
        "country": "Brazil",
        "visits": 395
    }];

    // Create axes

    var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
    categoryAxis.dataFields.category = "country";
    categoryAxis.renderer.grid.template.location = 0;
    categoryAxis.renderer.minGridDistance = 30;

    categoryAxis.renderer.labels.template.adapter.add("dy", function (dy, target) {
        if (target.dataItem && target.dataItem.index & 2 == 2) {
            return dy + 25;
        }
        return dy;
    });

    var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

    // Create series
    var series = chart.series.push(new am4charts.ColumnSeries());
    series.dataFields.valueY = "visits";
    series.dataFields.categoryX = "country";
    series.name = "Visits";
    series.columns.template.tooltipText = "{categoryX}: [bold]{valueY}[/]";
    series.columns.template.fillOpacity = .8;

    var columnTemplate = series.columns.template;
    columnTemplate.strokeWidth = 2;
    columnTemplate.strokeOpacity = 1;

}); // end am4core.ready()

$(document).ready(function() {
    $('.select2').select2();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoic2Fya29vdC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBhc2lkZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhc2lkZScpO1xyXG5jb25zdCBhc2lkZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhc2lkZS1idG4nKTtcclxuZnVuY3Rpb24gaGFuZGxlQXNpZGUoZXZlbnQpIHtcclxuICAgIGFzaWRlLmNsYXNzTGlzdC5hZGQoJ29wZW4nKTtcclxufVxyXG5hc2lkZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUFzaWRlKTtcclxuXHJcbmNvbnN0IHByb2ZpbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZScpO1xyXG5jb25zdCBkcm9wZG93biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlLWRyb3Bkb3duJyk7XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVQcm9maWxlQ2xpY2soZXZlbnQpIHtcclxuICAgIGRyb3Bkb3duLmNsYXNzTGlzdC5hZGQoJ29wZW4nKTtcclxufVxyXG5cclxucHJvZmlsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZVByb2ZpbGVDbGljayk7XHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICBpZiAoIWV2ZW50LnRhcmdldC5jbG9zZXN0KCcucHJvZmlsZS1kaXYnKSkge1xyXG4gICAgICAgIGRyb3Bkb3duLmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcclxuICAgIH1cclxuICAgIGlmICghZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJyNhc2lkZScpICYmICFldmVudC50YXJnZXQuY2xvc2VzdCgnI2FzaWRlLWJ0bicpKSB7XHJcbiAgICAgICAgYXNpZGUuY2xhc3NMaXN0LnJlbW92ZSgnb3BlbicpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbmFtNGNvcmUucmVhZHkoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIC8vIFRoZW1lcyBiZWdpblxyXG4gICAgYW00Y29yZS51c2VUaGVtZShhbTR0aGVtZXNfYW1jaGFydHMpO1xyXG4gICAgLy8gVGhlbWVzIGVuZFxyXG5cclxuICAgIC8vIENyZWF0ZSBjaGFydCBpbnN0YW5jZVxyXG4gICAgdmFyIGNoYXJ0ID0gYW00Y29yZS5jcmVhdGUoXCJjaGFydGRpdlwiLCBhbTRjaGFydHMuWFlDaGFydCk7XHJcblxyXG4gICAgLy8gQWRkIGRhdGFcclxuICAgIGNoYXJ0LmRhdGEgPSBbe1xyXG4gICAgICAgIFwiY291bnRyeVwiOiBcIlVTQVwiLFxyXG4gICAgICAgIFwidmlzaXRzXCI6IDIwMjVcclxuICAgIH0sIHtcclxuICAgICAgICBcImNvdW50cnlcIjogXCJDaGluYVwiLFxyXG4gICAgICAgIFwidmlzaXRzXCI6IDE4ODJcclxuICAgIH0sIHtcclxuICAgICAgICBcImNvdW50cnlcIjogXCJKYXBhblwiLFxyXG4gICAgICAgIFwidmlzaXRzXCI6IDE4MDlcclxuICAgIH0sIHtcclxuICAgICAgICBcImNvdW50cnlcIjogXCJHZXJtYW55XCIsXHJcbiAgICAgICAgXCJ2aXNpdHNcIjogMTMyMlxyXG4gICAgfSwge1xyXG4gICAgICAgIFwiY291bnRyeVwiOiBcIlVLXCIsXHJcbiAgICAgICAgXCJ2aXNpdHNcIjogMTEyMlxyXG4gICAgfSwge1xyXG4gICAgICAgIFwiY291bnRyeVwiOiBcIkZyYW5jZVwiLFxyXG4gICAgICAgIFwidmlzaXRzXCI6IDExMTRcclxuICAgIH0sIHtcclxuICAgICAgICBcImNvdW50cnlcIjogXCJJbmRpYVwiLFxyXG4gICAgICAgIFwidmlzaXRzXCI6IDk4NFxyXG4gICAgfSwge1xyXG4gICAgICAgIFwiY291bnRyeVwiOiBcIlNwYWluXCIsXHJcbiAgICAgICAgXCJ2aXNpdHNcIjogNzExXHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiTmV0aGVybGFuZHNcIixcclxuICAgICAgICBcInZpc2l0c1wiOiA2NjVcclxuICAgIH0sIHtcclxuICAgICAgICBcImNvdW50cnlcIjogXCJSdXNzaWFcIixcclxuICAgICAgICBcInZpc2l0c1wiOiA1ODBcclxuICAgIH0sIHtcclxuICAgICAgICBcImNvdW50cnlcIjogXCJTb3V0aCBLb3JlYVwiLFxyXG4gICAgICAgIFwidmlzaXRzXCI6IDQ0M1xyXG4gICAgfSwge1xyXG4gICAgICAgIFwiY291bnRyeVwiOiBcIkNhbmFkYVwiLFxyXG4gICAgICAgIFwidmlzaXRzXCI6IDQ0MVxyXG4gICAgfSwge1xyXG4gICAgICAgIFwiY291bnRyeVwiOiBcIkJyYXppbFwiLFxyXG4gICAgICAgIFwidmlzaXRzXCI6IDM5NVxyXG4gICAgfV07XHJcblxyXG4gICAgLy8gQ3JlYXRlIGF4ZXNcclxuXHJcbiAgICB2YXIgY2F0ZWdvcnlBeGlzID0gY2hhcnQueEF4ZXMucHVzaChuZXcgYW00Y2hhcnRzLkNhdGVnb3J5QXhpcygpKTtcclxuICAgIGNhdGVnb3J5QXhpcy5kYXRhRmllbGRzLmNhdGVnb3J5ID0gXCJjb3VudHJ5XCI7XHJcbiAgICBjYXRlZ29yeUF4aXMucmVuZGVyZXIuZ3JpZC50ZW1wbGF0ZS5sb2NhdGlvbiA9IDA7XHJcbiAgICBjYXRlZ29yeUF4aXMucmVuZGVyZXIubWluR3JpZERpc3RhbmNlID0gMzA7XHJcblxyXG4gICAgY2F0ZWdvcnlBeGlzLnJlbmRlcmVyLmxhYmVscy50ZW1wbGF0ZS5hZGFwdGVyLmFkZChcImR5XCIsIGZ1bmN0aW9uIChkeSwgdGFyZ2V0KSB7XHJcbiAgICAgICAgaWYgKHRhcmdldC5kYXRhSXRlbSAmJiB0YXJnZXQuZGF0YUl0ZW0uaW5kZXggJiAyID09IDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGR5ICsgMjU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkeTtcclxuICAgIH0pO1xyXG5cclxuICAgIHZhciB2YWx1ZUF4aXMgPSBjaGFydC55QXhlcy5wdXNoKG5ldyBhbTRjaGFydHMuVmFsdWVBeGlzKCkpO1xyXG5cclxuICAgIC8vIENyZWF0ZSBzZXJpZXNcclxuICAgIHZhciBzZXJpZXMgPSBjaGFydC5zZXJpZXMucHVzaChuZXcgYW00Y2hhcnRzLkNvbHVtblNlcmllcygpKTtcclxuICAgIHNlcmllcy5kYXRhRmllbGRzLnZhbHVlWSA9IFwidmlzaXRzXCI7XHJcbiAgICBzZXJpZXMuZGF0YUZpZWxkcy5jYXRlZ29yeVggPSBcImNvdW50cnlcIjtcclxuICAgIHNlcmllcy5uYW1lID0gXCJWaXNpdHNcIjtcclxuICAgIHNlcmllcy5jb2x1bW5zLnRlbXBsYXRlLnRvb2x0aXBUZXh0ID0gXCJ7Y2F0ZWdvcnlYfTogW2JvbGRde3ZhbHVlWX1bL11cIjtcclxuICAgIHNlcmllcy5jb2x1bW5zLnRlbXBsYXRlLmZpbGxPcGFjaXR5ID0gLjg7XHJcblxyXG4gICAgdmFyIGNvbHVtblRlbXBsYXRlID0gc2VyaWVzLmNvbHVtbnMudGVtcGxhdGU7XHJcbiAgICBjb2x1bW5UZW1wbGF0ZS5zdHJva2VXaWR0aCA9IDI7XHJcbiAgICBjb2x1bW5UZW1wbGF0ZS5zdHJva2VPcGFjaXR5ID0gMTtcclxuXHJcbn0pOyAvLyBlbmQgYW00Y29yZS5yZWFkeSgpXHJcblxyXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuICAgICQoJy5zZWxlY3QyJykuc2VsZWN0MigpO1xyXG59KTsiXX0=