const aside = document.querySelector('#aside');
const asideBtn = document.querySelector('#aside-btn');
function handleAside(event) {
    aside.classList.add('open');
}
asideBtn.addEventListener('click', handleAside);

const profile = document.querySelector('.profile');
const dropdown = document.querySelector('.profile-dropdown');

function handleProfileClick(event) {
    dropdown.classList.add('open');
}

profile.addEventListener('click', handleProfileClick);
window.addEventListener('click', function(event) {
    if (!event.target.closest('.profile-div')) {
        dropdown.classList.remove('open');
    }
    if (!event.target.closest('#aside') && !event.target.closest('#aside-btn')) {
        aside.classList.remove('open');
    }
});

am4core.ready(function () {

    // Themes begin
    am4core.useTheme(am4themes_amcharts);
    // Themes end

    // Create chart instance
    var chart = am4core.create("chartdiv", am4charts.XYChart);

    // Add data
    chart.data = [{
        "country": "USA",
        "visits": 2025
    }, {
        "country": "China",
        "visits": 1882
    }, {
        "country": "Japan",
        "visits": 1809
    }, {
        "country": "Germany",
        "visits": 1322
    }, {
        "country": "UK",
        "visits": 1122
    }, {
        "country": "France",
        "visits": 1114
    }, {
        "country": "India",
        "visits": 984
    }, {
        "country": "Spain",
        "visits": 711
    }, {
        "country": "Netherlands",
        "visits": 665
    }, {
        "country": "Russia",
        "visits": 580
    }, {
        "country": "South Korea",
        "visits": 443
    }, {
        "country": "Canada",
        "visits": 441
    }, {
        "country": "Brazil",
        "visits": 395
    }];

    // Create axes

    var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
    categoryAxis.dataFields.category = "country";
    categoryAxis.renderer.grid.template.location = 0;
    categoryAxis.renderer.minGridDistance = 30;

    categoryAxis.renderer.labels.template.adapter.add("dy", function (dy, target) {
        if (target.dataItem && target.dataItem.index & 2 == 2) {
            return dy + 25;
        }
        return dy;
    });

    var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

    // Create series
    var series = chart.series.push(new am4charts.ColumnSeries());
    series.dataFields.valueY = "visits";
    series.dataFields.categoryX = "country";
    series.name = "Visits";
    series.columns.template.tooltipText = "{categoryX}: [bold]{valueY}[/]";
    series.columns.template.fillOpacity = .8;

    var columnTemplate = series.columns.template;
    columnTemplate.strokeWidth = 2;
    columnTemplate.strokeOpacity = 1;

}); // end am4core.ready()
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6InNhcmtvb3QubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXNpZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXNpZGUnKTtcclxuY29uc3QgYXNpZGVCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXNpZGUtYnRuJyk7XHJcbmZ1bmN0aW9uIGhhbmRsZUFzaWRlKGV2ZW50KSB7XHJcbiAgICBhc2lkZS5jbGFzc0xpc3QuYWRkKCdvcGVuJyk7XHJcbn1cclxuYXNpZGVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVBc2lkZSk7XHJcblxyXG5jb25zdCBwcm9maWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGUnKTtcclxuY29uc3QgZHJvcGRvd24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZS1kcm9wZG93bicpO1xyXG5cclxuZnVuY3Rpb24gaGFuZGxlUHJvZmlsZUNsaWNrKGV2ZW50KSB7XHJcbiAgICBkcm9wZG93bi5jbGFzc0xpc3QuYWRkKCdvcGVuJyk7XHJcbn1cclxuXHJcbnByb2ZpbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVQcm9maWxlQ2xpY2spO1xyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgaWYgKCFldmVudC50YXJnZXQuY2xvc2VzdCgnLnByb2ZpbGUtZGl2JykpIHtcclxuICAgICAgICBkcm9wZG93bi5jbGFzc0xpc3QucmVtb3ZlKCdvcGVuJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWV2ZW50LnRhcmdldC5jbG9zZXN0KCcjYXNpZGUnKSAmJiAhZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJyNhc2lkZS1idG4nKSkge1xyXG4gICAgICAgIGFzaWRlLmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcclxuICAgIH1cclxufSk7XHJcblxyXG5hbTRjb3JlLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAvLyBUaGVtZXMgYmVnaW5cclxuICAgIGFtNGNvcmUudXNlVGhlbWUoYW00dGhlbWVzX2FtY2hhcnRzKTtcclxuICAgIC8vIFRoZW1lcyBlbmRcclxuXHJcbiAgICAvLyBDcmVhdGUgY2hhcnQgaW5zdGFuY2VcclxuICAgIHZhciBjaGFydCA9IGFtNGNvcmUuY3JlYXRlKFwiY2hhcnRkaXZcIiwgYW00Y2hhcnRzLlhZQ2hhcnQpO1xyXG5cclxuICAgIC8vIEFkZCBkYXRhXHJcbiAgICBjaGFydC5kYXRhID0gW3tcclxuICAgICAgICBcImNvdW50cnlcIjogXCJVU0FcIixcclxuICAgICAgICBcInZpc2l0c1wiOiAyMDI1XHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiQ2hpbmFcIixcclxuICAgICAgICBcInZpc2l0c1wiOiAxODgyXHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiSmFwYW5cIixcclxuICAgICAgICBcInZpc2l0c1wiOiAxODA5XHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiR2VybWFueVwiLFxyXG4gICAgICAgIFwidmlzaXRzXCI6IDEzMjJcclxuICAgIH0sIHtcclxuICAgICAgICBcImNvdW50cnlcIjogXCJVS1wiLFxyXG4gICAgICAgIFwidmlzaXRzXCI6IDExMjJcclxuICAgIH0sIHtcclxuICAgICAgICBcImNvdW50cnlcIjogXCJGcmFuY2VcIixcclxuICAgICAgICBcInZpc2l0c1wiOiAxMTE0XHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiSW5kaWFcIixcclxuICAgICAgICBcInZpc2l0c1wiOiA5ODRcclxuICAgIH0sIHtcclxuICAgICAgICBcImNvdW50cnlcIjogXCJTcGFpblwiLFxyXG4gICAgICAgIFwidmlzaXRzXCI6IDcxMVxyXG4gICAgfSwge1xyXG4gICAgICAgIFwiY291bnRyeVwiOiBcIk5ldGhlcmxhbmRzXCIsXHJcbiAgICAgICAgXCJ2aXNpdHNcIjogNjY1XHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiUnVzc2lhXCIsXHJcbiAgICAgICAgXCJ2aXNpdHNcIjogNTgwXHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiU291dGggS29yZWFcIixcclxuICAgICAgICBcInZpc2l0c1wiOiA0NDNcclxuICAgIH0sIHtcclxuICAgICAgICBcImNvdW50cnlcIjogXCJDYW5hZGFcIixcclxuICAgICAgICBcInZpc2l0c1wiOiA0NDFcclxuICAgIH0sIHtcclxuICAgICAgICBcImNvdW50cnlcIjogXCJCcmF6aWxcIixcclxuICAgICAgICBcInZpc2l0c1wiOiAzOTVcclxuICAgIH1dO1xyXG5cclxuICAgIC8vIENyZWF0ZSBheGVzXHJcblxyXG4gICAgdmFyIGNhdGVnb3J5QXhpcyA9IGNoYXJ0LnhBeGVzLnB1c2gobmV3IGFtNGNoYXJ0cy5DYXRlZ29yeUF4aXMoKSk7XHJcbiAgICBjYXRlZ29yeUF4aXMuZGF0YUZpZWxkcy5jYXRlZ29yeSA9IFwiY291bnRyeVwiO1xyXG4gICAgY2F0ZWdvcnlBeGlzLnJlbmRlcmVyLmdyaWQudGVtcGxhdGUubG9jYXRpb24gPSAwO1xyXG4gICAgY2F0ZWdvcnlBeGlzLnJlbmRlcmVyLm1pbkdyaWREaXN0YW5jZSA9IDMwO1xyXG5cclxuICAgIGNhdGVnb3J5QXhpcy5yZW5kZXJlci5sYWJlbHMudGVtcGxhdGUuYWRhcHRlci5hZGQoXCJkeVwiLCBmdW5jdGlvbiAoZHksIHRhcmdldCkge1xyXG4gICAgICAgIGlmICh0YXJnZXQuZGF0YUl0ZW0gJiYgdGFyZ2V0LmRhdGFJdGVtLmluZGV4ICYgMiA9PSAyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkeSArIDI1O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZHk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgdmFsdWVBeGlzID0gY2hhcnQueUF4ZXMucHVzaChuZXcgYW00Y2hhcnRzLlZhbHVlQXhpcygpKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgc2VyaWVzXHJcbiAgICB2YXIgc2VyaWVzID0gY2hhcnQuc2VyaWVzLnB1c2gobmV3IGFtNGNoYXJ0cy5Db2x1bW5TZXJpZXMoKSk7XHJcbiAgICBzZXJpZXMuZGF0YUZpZWxkcy52YWx1ZVkgPSBcInZpc2l0c1wiO1xyXG4gICAgc2VyaWVzLmRhdGFGaWVsZHMuY2F0ZWdvcnlYID0gXCJjb3VudHJ5XCI7XHJcbiAgICBzZXJpZXMubmFtZSA9IFwiVmlzaXRzXCI7XHJcbiAgICBzZXJpZXMuY29sdW1ucy50ZW1wbGF0ZS50b29sdGlwVGV4dCA9IFwie2NhdGVnb3J5WH06IFtib2xkXXt2YWx1ZVl9Wy9dXCI7XHJcbiAgICBzZXJpZXMuY29sdW1ucy50ZW1wbGF0ZS5maWxsT3BhY2l0eSA9IC44O1xyXG5cclxuICAgIHZhciBjb2x1bW5UZW1wbGF0ZSA9IHNlcmllcy5jb2x1bW5zLnRlbXBsYXRlO1xyXG4gICAgY29sdW1uVGVtcGxhdGUuc3Ryb2tlV2lkdGggPSAyO1xyXG4gICAgY29sdW1uVGVtcGxhdGUuc3Ryb2tlT3BhY2l0eSA9IDE7XHJcblxyXG59KTsgLy8gZW5kIGFtNGNvcmUucmVhZHkoKSJdfQ==