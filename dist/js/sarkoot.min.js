am4core.ready(function () {

    // Themes begin
    am4core.useTheme(am4themes_amcharts);
    // Themes end

    // Create chart instance
    var chart = am4core.create("chartdiv", am4charts.XYChart);

    // Add data
    chart.data = [{
        "country": "USA",
        "visits": 2025
    }, {
        "country": "China",
        "visits": 1882
    }, {
        "country": "Japan",
        "visits": 1809
    }, {
        "country": "Germany",
        "visits": 1322
    }, {
        "country": "UK",
        "visits": 1122
    }, {
        "country": "France",
        "visits": 1114
    }, {
        "country": "India",
        "visits": 984
    }, {
        "country": "Spain",
        "visits": 711
    }, {
        "country": "Netherlands",
        "visits": 665
    }, {
        "country": "Russia",
        "visits": 580
    }, {
        "country": "South Korea",
        "visits": 443
    }, {
        "country": "Canada",
        "visits": 441
    }, {
        "country": "Brazil",
        "visits": 395
    }];

    // Create axes

    var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
    categoryAxis.dataFields.category = "country";
    categoryAxis.renderer.grid.template.location = 0;
    categoryAxis.renderer.minGridDistance = 30;

    categoryAxis.renderer.labels.template.adapter.add("dy", function (dy, target) {
        if (target.dataItem && target.dataItem.index & 2 == 2) {
            return dy + 25;
        }
        return dy;
    });

    var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

    // Create series
    var series = chart.series.push(new am4charts.ColumnSeries());
    series.dataFields.valueY = "visits";
    series.dataFields.categoryX = "country";
    series.name = "Visits";
    series.columns.template.tooltipText = "{categoryX}: [bold]{valueY}[/]";
    series.columns.template.fillOpacity = .8;

    var columnTemplate = series.columns.template;
    columnTemplate.strokeWidth = 2;
    columnTemplate.strokeOpacity = 1;

}); // end am4core.ready()
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6InNhcmtvb3QubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW00Y29yZS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgLy8gVGhlbWVzIGJlZ2luXHJcbiAgICBhbTRjb3JlLnVzZVRoZW1lKGFtNHRoZW1lc19hbWNoYXJ0cyk7XHJcbiAgICAvLyBUaGVtZXMgZW5kXHJcblxyXG4gICAgLy8gQ3JlYXRlIGNoYXJ0IGluc3RhbmNlXHJcbiAgICB2YXIgY2hhcnQgPSBhbTRjb3JlLmNyZWF0ZShcImNoYXJ0ZGl2XCIsIGFtNGNoYXJ0cy5YWUNoYXJ0KTtcclxuXHJcbiAgICAvLyBBZGQgZGF0YVxyXG4gICAgY2hhcnQuZGF0YSA9IFt7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiVVNBXCIsXHJcbiAgICAgICAgXCJ2aXNpdHNcIjogMjAyNVxyXG4gICAgfSwge1xyXG4gICAgICAgIFwiY291bnRyeVwiOiBcIkNoaW5hXCIsXHJcbiAgICAgICAgXCJ2aXNpdHNcIjogMTg4MlxyXG4gICAgfSwge1xyXG4gICAgICAgIFwiY291bnRyeVwiOiBcIkphcGFuXCIsXHJcbiAgICAgICAgXCJ2aXNpdHNcIjogMTgwOVxyXG4gICAgfSwge1xyXG4gICAgICAgIFwiY291bnRyeVwiOiBcIkdlcm1hbnlcIixcclxuICAgICAgICBcInZpc2l0c1wiOiAxMzIyXHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiVUtcIixcclxuICAgICAgICBcInZpc2l0c1wiOiAxMTIyXHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiRnJhbmNlXCIsXHJcbiAgICAgICAgXCJ2aXNpdHNcIjogMTExNFxyXG4gICAgfSwge1xyXG4gICAgICAgIFwiY291bnRyeVwiOiBcIkluZGlhXCIsXHJcbiAgICAgICAgXCJ2aXNpdHNcIjogOTg0XHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiU3BhaW5cIixcclxuICAgICAgICBcInZpc2l0c1wiOiA3MTFcclxuICAgIH0sIHtcclxuICAgICAgICBcImNvdW50cnlcIjogXCJOZXRoZXJsYW5kc1wiLFxyXG4gICAgICAgIFwidmlzaXRzXCI6IDY2NVxyXG4gICAgfSwge1xyXG4gICAgICAgIFwiY291bnRyeVwiOiBcIlJ1c3NpYVwiLFxyXG4gICAgICAgIFwidmlzaXRzXCI6IDU4MFxyXG4gICAgfSwge1xyXG4gICAgICAgIFwiY291bnRyeVwiOiBcIlNvdXRoIEtvcmVhXCIsXHJcbiAgICAgICAgXCJ2aXNpdHNcIjogNDQzXHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiQ2FuYWRhXCIsXHJcbiAgICAgICAgXCJ2aXNpdHNcIjogNDQxXHJcbiAgICB9LCB7XHJcbiAgICAgICAgXCJjb3VudHJ5XCI6IFwiQnJhemlsXCIsXHJcbiAgICAgICAgXCJ2aXNpdHNcIjogMzk1XHJcbiAgICB9XTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYXhlc1xyXG5cclxuICAgIHZhciBjYXRlZ29yeUF4aXMgPSBjaGFydC54QXhlcy5wdXNoKG5ldyBhbTRjaGFydHMuQ2F0ZWdvcnlBeGlzKCkpO1xyXG4gICAgY2F0ZWdvcnlBeGlzLmRhdGFGaWVsZHMuY2F0ZWdvcnkgPSBcImNvdW50cnlcIjtcclxuICAgIGNhdGVnb3J5QXhpcy5yZW5kZXJlci5ncmlkLnRlbXBsYXRlLmxvY2F0aW9uID0gMDtcclxuICAgIGNhdGVnb3J5QXhpcy5yZW5kZXJlci5taW5HcmlkRGlzdGFuY2UgPSAzMDtcclxuXHJcbiAgICBjYXRlZ29yeUF4aXMucmVuZGVyZXIubGFiZWxzLnRlbXBsYXRlLmFkYXB0ZXIuYWRkKFwiZHlcIiwgZnVuY3Rpb24gKGR5LCB0YXJnZXQpIHtcclxuICAgICAgICBpZiAodGFyZ2V0LmRhdGFJdGVtICYmIHRhcmdldC5kYXRhSXRlbS5pbmRleCAmIDIgPT0gMikge1xyXG4gICAgICAgICAgICByZXR1cm4gZHkgKyAyNTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGR5O1xyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIHZhbHVlQXhpcyA9IGNoYXJ0LnlBeGVzLnB1c2gobmV3IGFtNGNoYXJ0cy5WYWx1ZUF4aXMoKSk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIHNlcmllc1xyXG4gICAgdmFyIHNlcmllcyA9IGNoYXJ0LnNlcmllcy5wdXNoKG5ldyBhbTRjaGFydHMuQ29sdW1uU2VyaWVzKCkpO1xyXG4gICAgc2VyaWVzLmRhdGFGaWVsZHMudmFsdWVZID0gXCJ2aXNpdHNcIjtcclxuICAgIHNlcmllcy5kYXRhRmllbGRzLmNhdGVnb3J5WCA9IFwiY291bnRyeVwiO1xyXG4gICAgc2VyaWVzLm5hbWUgPSBcIlZpc2l0c1wiO1xyXG4gICAgc2VyaWVzLmNvbHVtbnMudGVtcGxhdGUudG9vbHRpcFRleHQgPSBcIntjYXRlZ29yeVh9OiBbYm9sZF17dmFsdWVZfVsvXVwiO1xyXG4gICAgc2VyaWVzLmNvbHVtbnMudGVtcGxhdGUuZmlsbE9wYWNpdHkgPSAuODtcclxuXHJcbiAgICB2YXIgY29sdW1uVGVtcGxhdGUgPSBzZXJpZXMuY29sdW1ucy50ZW1wbGF0ZTtcclxuICAgIGNvbHVtblRlbXBsYXRlLnN0cm9rZVdpZHRoID0gMjtcclxuICAgIGNvbHVtblRlbXBsYXRlLnN0cm9rZU9wYWNpdHkgPSAxO1xyXG5cclxufSk7IC8vIGVuZCBhbTRjb3JlLnJlYWR5KCkiXX0=